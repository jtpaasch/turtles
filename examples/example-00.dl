#include "library/library.dl"

// =========================================================
// Example 00
// =========================================================

/*
------------------------------------------------------------
PROGRAM TEXT
------------------------------------------------------------

L01 {
L02     int x;
L03     x = x + 1;
L04     x = x + 1;
L05 }

------------------------------------------------------------
THE AST
------------------------------------------------------------

The block has this structure ("SL" is short for stmtList, "S"
is short for "statement", and dashes are nil statement lists):

           1 block
 +------------+----------+
 |                       |
 |                      2 SL
 |              +--------+-------+
 |              |                |
 |             3 SL             8 S
 |         +----+-----+          |
 |         |          |          |
 |       4 SL        7 S         |
 |     +---+---+      |          |
 |     |       |      |          |
 |   5 SL     6 S     |          |
 |     |       |      |          |
 {     -       int x; x = x + 1; x = x + 1; }
               L02    L03        L04        Done

*/

progEntry(1).

block(1,2).
stmtList(2,3,8).
stmtList(3,4,7).
stmtList(4,5,6).
nilStmtList(5).

declStmt(6,"L02",601,602).
declSpecList(601,60101,60102).
nilDeclSpecList(60101).
simpleTypeSpec(60102,"int").
declList(602,60201,60202).
nilDeclList(60201).
varDecl(60202,"x",6020200).
nilInit(6020200).

valueStmt(7,"L03",700).
assignOpExpr(700,"=",701,702).
lvalExpr(701,"x").
binOpExpr(702,"+",70201,70202).
lvalToRvalExpr(70201,7020100).
lvalExpr(7020100,"x").
intLitExpr(70202,"1").

valueStmt(8,"L04",800).
assignOpExpr(800,"=",801,802).
lvalExpr(801,"x").
binOpExpr(802,"+",80201,80202).
lvalToRvalExpr(80201,8020100).
lvalExpr(8020100,"x").
intLitExpr(80202,"1").


// =========================================================
// Compute some stuff
// =========================================================

architecture("x86").
createTrace(1,"L02").

