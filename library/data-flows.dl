
// =========================================================
// Data-flow graph of expressions
// =========================================================

.decl exprFlow(src:nid,snk:nid)
// .output exprFlow

exprFlow(N,N) :- varExpr(N,_).
exprFlow(N,N) :- numExpr(N,_).
exprFlow(LHS,E) :- binArithOpExpr(E,_,LHS,_).
exprFlow(RHS,E) :- binArithOpExpr(E,_,_,RHS).
exprFlow(LHS,E) :- binRelOpBexpr(E,_,LHS,_).
exprFlow(RHS,E) :- binRelOpBexpr(E,_,_,RHS).


// =========================================================
// Data-flow graph for concrete traces
// =========================================================

.decl isFlowLeaf(node:nid)
// .output isFlowLeaf

isFlowLeaf(N) :- exprFlow(N,_),numExpr(N,_).
isFlowLeaf("?").


.decl traceFlow(trace:tid,stage:stg,at:lab,src:nid,snk:nid)
// .output traceFlow

traceFlow(T,I,L,SRC,SNK) :-
  traceFlow(T,I,L,SNK,_),
  exprFlow(SRC,SNK), SRC != SNK.

traceFlow(T,I,L,"?",SNK) :-
  traceFlow(T,I,L,SNK,_),
  varExpr(SNK,V),
  lastDefd(T,I,L,V,"?").

traceFlow(T,I,L,SRC,SNK) :-
  traceFlow(T,I,L,SNK,_),
  varExpr(SNK,V),
  lastDefd(T,I,L,V,D),
  lhsVarNodeOfAssignment(D,SRC).

traceFlow(T,I-1,L1,SRC,SNK) :-
  traceStep(T,I,L1,_,_),
  isIfStmt(L1),
  guardExprOfIfStmt(L1,SNK),
  exprFlow(SRC,SNK).

traceFlow(T,I-1,L1,SRC,SNK) :-
  traceStep(T,I,L1,_,_),
  isWhileStmt(L1),
  guardExprOfIfStmt(L1,SNK),
  exprFlow(SRC,SNK).

traceFlow(T,I-1,L1,SRC,SNK) :-
  traceStep(T,I,L1,A,_),
  assignmentActionTag(A),
  lhsVarNodeOfAssignment(L1,SNK),
  rhsExprOfAssignment(L1,SRC).


.decl traceFlowGraph(trace:tid,src:nid,snk:nid)
// .output traceFlowGraph

traceFlowGraph(T,SRC,SNK) :- traceFlow(T,_,_,SRC,SNK).
traceFlowGraph(T,SRC,SNK) :-
  traceFlowGraph(T,SRC,N0),traceFlow(T,_,_,N0,SNK).


.decl traceFlowSummary(trace:tid,lhs:var,var:var,at:lab,src:atom,in:lab)
// .output traceFlowSummary

traceFlowSummary(T,SNK,"-",L2,SRC,L1) :-
  traceFlowGraph(T,N1,N2),isFlowLeaf(N1),
  inLabel(N1,L1),inLabel(N2,L2),
  atomAt(N1,SRC),lhsVar(N2,SNK).

traceFlowSummary(T,SNK,"-",L,"?","?") :-
  traceFlowGraph(T,"?",N),
  inLabel(N,L),
  lhsVar(N,SNK).

traceFlowSummary(T,"-",SNK,L2,SRC,L1) :-
  traceFlowGraph(T,N1,N2),isFlowLeaf(N1),
  inLabel(N1,L1),inLabel(N2,L2),
  atomAt(N1,SRC),varExpr(N2,SNK).

traceFlowSummary(T,"-",SNK,L,"?","?") :-
  traceFlowGraph(T,"?",N),
  inLabel(N,L),
  varExpr(N,SNK).


// =========================================================
// An abstraction: data-flow graphs
// =========================================================

/* The above `traceFlow` predicate computes the data-flow graph
 * for concrete traces. This is very precise, of course, since it is
 * exact for each trace. Howevr, we cannot compute this for every
 * possible trace, in cases where there are too many traces, or in
 * cases where traces are infinitely long (a program that loops forever).
 *
 * To compute data-flow finitely, we can over-approximate, and compute
 * it for every branch, just as we do wit reaching definitions.
 * The idea runs as follows. The collecting semantics is that, for
 * every program label, we collect the data-flow graph for every trace
 * that ends that label. Then, as an abstraction, we define `alpha`
 * as taking all those graphs and merging them. For the concretization,
 * we define `gamma` as all traces that end with a flow graph that
 * is embedded in the abstraction. This forms a Galois connection.
 *
 * To compute the abstract transfer functions, we do:
 * `alpha` after `traceFlow` after `gamma`. This effectively means
 * that we simply drop the trace ID and stage parameters, since when
 * we concretize, we get _all_ possible traces that can end with the
 * some embeddding in the abstract flow graph, and then when we apply
 * the concrete `traceFlow` to all those traces and re-abstract, we
 * would merge all the graphs and drop the trace ID and stage params.
 * So we can effectively just ignore the trace ID and stage parameters.
 * All we have to do is make sure that this won't miss any traces.
 * If you give it some thought, it should be clear that this in fact
 * captures all possible traces (and possibly more). The reason is that
 * concrete traces go down particular branches, but once we drop the
 * concrete details, we end up going down all the branches, even those
 * that might be concretely unreachable. So, our abstract version is
 * an over-approximation, but it doesn't miss anything.
 */

.decl flow(at:lab,src:nid,snk:nid)
// .output flow

flow(L,SRC,SNK) :-
  flow(L,SNK,_),
  exprFlow(SRC,SNK), SRC != SNK.

flow(L,"?",SNK) :-
  flow(L,SNK,_),
  varExpr(SNK,V),
  reachingDef(L,V,"?").

flow(L,SRC,SNK) :-
  flow(L,SNK,_),
  varExpr(SNK,V),
  reachingDef(L,V,D),
  lhsVarNodeOfAssignment(D,SRC).

flow(L,SRC,SNK) :-
  isIfStmt(L),
  guardExprOfIfStmt(L,SNK),
  exprFlow(SRC,SNK).

flow(L,SRC,SNK) :-
  isWhileStmt(L),
  guardExprOfIfStmt(L,SNK),
  exprFlow(SRC,SNK).

flow(L,SRC,SNK) :-
  isAssignment(L),
  lhsVarNodeOfAssignment(L,SNK),
  rhsExprOfAssignment(L,SRC).
