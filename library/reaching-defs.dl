
// =========================================================
// Concrete reaching definitions
// =========================================================

/*
 * A defs-map `D : V -> Label?` maps variables to labels (or "?").
 * The idea is that this map tells us the label at which each variable
 * was last defined. For instance, if a trace is at label `L3`, and
 * we want to know where the variable `x` was last defined in the
 * trace, we could look it up in `D`. The label at which `x` was
 * last defined is called the "definition" or "assignment" to `x`
 * that _reaches_ the label we are currently at `L3`.
 *
 * As a matter of notation, let us say write `T(k).D` to denote the
 * defs-map at stage `k` in trace `T`. Then, we can say that,
 * if `T(k).D(x) = Ln`, that means that, at stage `k` in trace `T`,
 * `x` was last defined at label `Ln`. That is, `x`'s definition at
 * `Ln` is the one that reaches the point we are at in the trace.
 * On the other hand, if we have that `T(k).D(x) = ?`, that means
 * we don't know when `x` was last defined in the trace. This can
 * happen if `x` was never assigned a value in the trace, for instance.
 *
 * We'll say that `D0` is a special defs-map. It maps every program
 * variable to `?`. We use this as the initial defs-map in a trace.
 *
 * To track defs, we'll just augment or "instrument" traces by adding
 * reaching-definition information at each stage of the trace.
 *
 * More exactly, we'll do the following procedure:
 * 
 * - At the start of a trace, we'll initialize every variable as "?",
 *   i.e., we'll start each trace with D0.
 * - Next, we'll propogate the recorded defs-map along the trace as
 *   the trace proceeds from label to label.
 * - Whenever the trace hits an assignment action, we'll update the
 *   defs-map with the label where that assignment occurs.
 *
 * As a matter of informal notation, when we add or augment a trace
 * with a defs map, we'll add `D` to the label. For instance, suppose
 * we have a trace like this:
 *
 *     T(k).Ln ~[A]~> Lm
 *
 * To add a defs-map `D1` to that trace at `Ln` (i.e., at stage `k`),
 * we'll write this:
 *
 *     T(k).<D1,Ln> ~[A]~> Lm
 *
 * To add a defs-map `D2` to the trace at `Lm` (i.e., at stage `k+1`),
 * we'll write this:
 *
 *     T(k).<D1,Ln> ~[A]~> <D2,Lm>
 *
 * To indicate a defs-map `D` with one value updated, say, `x` updated
 * to label `Ln`, we'll write this: `D[x |-> Ln]`.
 */

/* To record an entry in a def-map, we write down the trace ID, the stage
 * the trace has reached, the label the trace is at, the variable that
 * we are jotting down where it was last defined, and the label where
 * it was last defined in the trace.
 */
.decl lastDefd(trace:tid,stage:stg,at:lab,var:var,defd:lab)
// .output lastDefd

/* Last-defd at the start of a trace:
 *
 *       T is a trace   T starts at L1
 *     ---------------------------------- Defs-trace-init
 *         T(0).- ~[init]~> <D0,L1>
 *
 * In other words, at the first label in a trace, the defs are `D0`,
 * i.e., every program variable is mapped to `?`, meaning that we
 * don't know when the variable was last defined.
 */
lastDefd(T,0,L2,V,"?") :-
  traceStep(T,0,L1,A,L2),
  initNullLabelTag(L1),initActionTag(A),
  progVar(V).

/* Last-defd for skip statements:
 *
 *        T(n).<D,Ln> ~[skip]~> Lm
 *     -------------------------------- Defs-trace-skip
 *      T(n).<D,Ln> ~[skip]~> <D,Lm>
 *
 * In other words, the defs don't change over a skip.
 */
lastDefd(T,I,L2,V,D) :-
  traceStep(T,I,L1,A,L2),
  skipActionTag(A),
  lastDefd(T,I-1,L1,V,D).

/* Last-defd for assignments:
 *
 *            T(n).<D,Ln> ~[assign x=z]~> Lm
 *     --------------------------------------------- Defs-trace-assign
 *      T(n).<D,Ln> ~[assign x=z]~> <D[x |-> Ln],Lm>
 *
 * In other words, after the assignment to `x` occurs at `Ln`, then at
 * `Lm` in the trace, in the defs-map `D`, `x` is set to be last
 * defined at `Ln`, while all other defs stay the same.
 */
lastDefd(T,I,L2,V1,D),
lastDefd(T,I,L2,V,L1) :-
  traceStep(T,I,L1,A,L2),
  assignmentActionTag(A),
  lastDefd(T,I-1,L1,V1,D),
  assignAction(T,I,V,_), V != V1.

/* Last-defd for branching statements (if-statements and while-loops)
 * that travel down the true branch:
 *
 *        T(n).<D,Ln> ~[go-T]~> Lm
 *     ------------------------------- Defs-trace-if-T
 *       T(n).<D,Ln> ~[go-T]~> <D,Lm>
 *
 * In other words, going through a guard down the true-branch doesn't
 * change any defs. They carry over to the true-branch.
 *
 * It's similar for traces that travel down the false branch:
 *
 *        T(n).<D,Ln> ~[go-F]~> Lm
 *     ------------------------------- Defs-trace-if-F
 *       T(n).<D,Ln> ~[go-F]~> <D,Lm>
 */
lastDefd(T,I,L2,V,D) :-
  traceStep(T,I,L1,A,L2),
  trueBranchActionTag(A),
  lastDefd(T,I-1,L1,V,D).
lastDefd(T,I,L2,V,D) :-
  traceStep(T,I,L1,A,L2),
  falseBranchActionTag(A),
  lastDefd(T,I-1,L1,V,D).


// =========================================================
// An abstraction: reaching definitions
// =========================================================

/* To collect concrete reaching definitions, we simply augmented
 * concrete traces with reaching definition information. That is,
 * we added a defs-map to each step in the trace, where the defs-map
 * mapped each program variable to the label where it was last
 * defined in the trace.
 *
 * In general, finding all reaching definitions for all points on
 * all traces is not computable. It is not even computable for
 * a single trace, if that trace goes forevere (e.g., in a program
 * that loops forever).
 *
 * We might attempt to compute all possible reaching definitions for,
 * say, some class of finite programs. But even that can be difficult,
 * because we'd have to figure out for our traces all the inputs that
 * would cause the program to go down all possible branches.
 *
 * The nice thing about reaching definitions is that we don't need to
 * compute any values at any point, since we never need to inspect
 * memory or environments. All we care about in a reaching definitions
 * analysis is the _labels_ where the variables were last defined.
 * We don't care about the _values_ those variables may have.
 * So, we don't even need to think about the values/environments
 * that concrete traces use to determine which branches to travel
 * down, and how many times to traverse a loop.
 * 
 * Instead, we can simply compute reaching definitions information for
 * all branches, regardless of any concrete trace. We can just simulate
 * walking the program, moving from label to label, collecting the
 * reaching definitions at each point. And whenever we hit a branch,
 * we'll just go down both branches.
 *
 * This is an over-approximation. In the concrete realm, a program may
 * have some branches that are dead (i.e., unreachable). If we compute
 * reaching definitions along those branches, we're basically just
 * computing extraneous and useless information.
 *
 * But that is okay. An analysis can be sound even if it includes
 * extraneous information. What it can't do is _miss_ information.
 * And this approach won't miss any information, since it will walk
 * over a superset of all possible program traces.
 */

/* So, we'll write down at each label each program variable, and
 * we'll write down the label where it was last defined. This
 * will be done just as we did for the concrete defs above. That is
 * to say, we'll start by initializing every variable as "?",
 * then we'll step through the program, label by label, propagating
 * those defs. Whenever we hit an assignment, we'll update that
 * def with the label where that assignment occurs. We'll also go
 * down both true- and false-branches whenever we hit a guard.
 * That way, we cover all branches.
 *
 * Intuitively, it is clear that a while-loop will reach a fixpoint
 * after one iteration, since any variables that get defined in the
 * loop will get added to the list when the loop returns back to
 * the guard.
 */
.decl reachingDef(at:lab,var:var,defd:lab)
// .output reachingDef

/* We can think about this as abstracting from the concrete
 * last-defined relation. To abstract the information we want
 * from the concrete traces, we could collect all the traces
 * together, and at each label, we could pop off the last-defd's
 * from each trace, and dump them into a set. This is an abstraction
 * because we're onyl collecting the last entries from each trace.
 * We're not looking at any of the history in those traces.
 *
 * If we've collected all possible concrete traces, then this
 * abstraction is in fact fully precise, because it tells us all
 * and only those definitions that reach each program point.
 * If there are any dead branches, then the concrete traces won't
 * travel down those branches, so no information from those dead
 * branches will be present in the collected information.
 *
 * A way to calculate the abstract transition rules is to start
 * with some abstract initial information, then concretize, then run
 * the concrete transfer rule on that concrete data, then abstract
 * again. The composition is alpha after F after gamma, where F is
 * the concrete transfer function.
 *
 * We can do that here. We start with abstract information: set
 * each program variable to ?. Then concretize. To concretize, we'll
 * just say that we get every concrete trace that can end with the
 * definitions in our abstract set. Then we do the concrete transfer
 * function, and then we abstract again.
 *
 * In this way, we actually induce or calculate the abstract
 * version of collecting the last-defnd information. In short,
 * we induce or calculate an abstract analysis in a principled way.
 */

/* The concrete rule for initializing a last-defnd trace is this:
 *
 *       T is a trace   T starts at L1
 *     ---------------------------------- Defs-trace-init
 *         T(0).- ~[init]~> <D0,L1>
 *
 * All we need to do is abstract that, i.e., collect D0. This is easy,
 * since there's only one version of D0, namely the one where
 * every program variable is mapped to "?".
 *
 *       Ln is prog start    x is a program var
 *     ----------------------------------------- RD-init
 *               reachingDef(Ln)(x) = ?
 */

reachingDef(L,V,"?") :-
  program(N), labelOf(N,L),progVar(V).

/* The rule to compute concrete last-defd for skip statements was this:
 *
 *        T(n).<D,Ln> ~[skip]~> Lm
 *     -------------------------------- Defs-trace-skip
 *      T(n).<D,Ln> ~[skip]~> <D,Lm>
 *
 * In other words, the defs don't change over a skip. To abstract from
 * this, we just carry over whateve set of reaching defs we had at
 * the previous label, since `alpha` after `id` after `gamma` gives
 * the same results we started with. Hence:
 *
 *       [L1] skip    reachingDef(L1)(x) = L   next(L1) = L2
 *     ------------------------------------------------------ RD-skip
 *                    reachingDef(L2)(x) = L
 */
reachingDef(L2,V,D) :-
  reachingDef(L1,V,D),next(L1,L2),isSkip(L1).

/* The last-defd rule for assignments was this:
 *
 *            T(n).<D,Ln> ~[assign x=z]~> Lm
 *     --------------------------------------------- Defs-trace-assign
 *      T(n).<D,Ln> ~[assign x=z]~> <D[x |-> Ln],Lm>
 *
 * To abstract this, we need to keep whatever defs there were before,
 * except for the one for the variable being assigned to. That one
 * gets a new def site (namely, the current label where it's getting
 * assigned a new value). This will be true for every concrete trace
 * that results from our concretization, but concretization will
 * introduce no new variables, so `alpha` after `Defs-trace-assign`
 * after `gamma` is just the same as the concrete version: you just
 * take the same reaching defs as before, except you update the one
 * getting assigned a new value. That one gets the new label.
 *
 *              [L1] x := e        next(L1) = L2
 *               reachingDef(L1)(y) = L (x != y)
 *     ------------------------------------------------- RD-assgn
 *      reachingDef(L2)(x) = L1, reachingDef(L2)(y) = L
 */

reachingDef(L2,V1,D),
reachingDef(L2,V,L1) :-
  reachingDef(L1,V,_),isAssignment(L1),next(L1,L2),
  lhsVarOfAssignment(L1,V),reachingDef(L1,V1,D), V != V1.

/* The last-defd rule for branching statements (if-statements and
 * while-loops) that travel down the true branch is this:
 *
 *        T(n).<D,Ln> ~[go-T]~> Lm
 *     ------------------------------- Defs-trace-if-T
 *       T(n).<D,Ln> ~[go-T]~> <D,Lm>
 *
 * To abstract this, we simply need to propagate the defs on to the
 * true branch. Similarly, for the false branch. As with skips,
 * `alpha` after `id` after `gamma` gives us the same results we
 * started with. Hence:
 *
 *     [L1] if (b) then L2 else L3    nextTrue(L1,L2)
 *                reachingDef(L1)(x) = L
 *     ------------------------------------------------ RD-if-T
 *               reachingDef(L2)(x) = L
 *
 *     [L1] if (b) then L2 else L3    nextFalse(L1,L3)
 *                reachingDef(L1)(x) = L
 *     ------------------------------------------------ RD-while-T
 *               reachingDef(L3)(x) = L
 */
reachingDef(L2,V,D) :-
  reachingDef(L1,V,D),isIfStmt(L1),nextTrue(L1,L2).
reachingDef(L2,V,D) :-
  reachingDef(L1,V,D),isIfStmt(L1),nextFalse(L1,L2).

/* It's similar for while-statements.
 *
 *       [L1] while (b) do L2 done    nextTrue(L1,L2)
 *                reachingDef(L1)(x) = L
 *     ------------------------------------------------ RD-while-T
 *               reachingDef(L2)(x) = L
 *
 *       [L1] while (b) do L2 done    nextFalse(L1,L2)
 *                  reachingDef(L1)(x) = L
 *     ------------------------------------------------ RD-while-F
 *               reachingDef(L3)(x) = L
 */
reachingDef(L2,V,D) :-
  reachingDef(L1,V,D),isWhileStmt(L1),nextTrue(L1,L2).

reachingDef(L2,V,D) :-
  reachingDef(L1,V,D),isWhileStmt(L1),nextFalse(L1,L2).
 
