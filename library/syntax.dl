
// =========================================================
// Syntax
// =========================================================


// ---------------------------------------------------------
// Expressions (arithmetic)
// ---------------------------------------------------------

.decl emptyExpr(node:id)
.decl inputExpr(node:id)
.decl intLitExpr(node:id,num:num)
.decl lvalExpr(node:id,var:ident)
.decl lvalToRvalExpr(node:id,lval:id)
.decl signedToUnsignedIntExpr(node:id,expr:id)
.decl unsignedToSignedIntExpr(node:id,expr:id)

.decl unOpExpr(node:id,op:unOp,expr:id)

.decl isNegOp(op:unOp)
isNegOp("-").

.decl binOpExpr(node:id,op:binOp,lhs:id,rhs:id)

.decl isAddOp(op:binOp)
isAddOp("+").

// isMultOp("*").
// etc.

.decl assignOpExpr(node:id,op:assignOp,lhs:id,rhs:id)

.decl isAssignOp(op:assignOp)
isAssignOp("=").

// isAddAndAssignOp("+=").
// etc.


// ---------------------------------------------------------
// Boolean expressions
// ---------------------------------------------------------

.decl boolLitExpr(node:id,bool:bool)
.decl relOpExpr(node:id,op:relOp,lhs:id,rhs:id)

.decl isLtOp(op:relOp)

isLtOp("<").

// isLteOp("<=").
// etc.


// ---------------------------------------------------------
// Decls
// ---------------------------------------------------------

.decl declSpecList(node:id,head:id,tail:id)
.decl nilDeclSpecList(node:id)

.decl simpleTypeSpec(node:id,typ:typ)

.decl isIntTypeSpec(typ:typ)
isIntTypeSpec("int").

.decl declList(node:id,head:id,tail:id)
.decl nilDeclList(node:id)
.decl varDecl(node:id,var:ident,init:id)
.decl nilInit(node:id)
.decl assignInit(node:id)


// ---------------------------------------------------------
// Statements
// ---------------------------------------------------------

.decl declStmt(node:id,cp:cp,specList:id,declList:id)
.decl valueStmt(node:id,cp:cp,expr:id)
.decl ifThenStmt(node:id,cp:cp,guard:id,branch:id)
.decl ifThenElseStmt(node:id,cp:cp,guard:id,branch1:id,branch2:id)
.decl whileStmt(node:id,cp:cp,guard:id,body:id)
.decl labeledStmt(node:id,label:ident,stmt:id)
.decl breakStmt(node:id,cp:cp)
.decl continueStmt(node:id,cp:cp)
.decl gotoStmt(node:id,cp:cp,trgt:ident)
.decl block(node:id,child:id)


// ---------------------------------------------------------
// Statement lists
// ---------------------------------------------------------

.decl stmtList(node:id,head:id,tail:id)
.decl nilStmtList(node:id)


// ---------------------------------------------------------
// Program entry
// ---------------------------------------------------------

.decl progEntry(node:id)
